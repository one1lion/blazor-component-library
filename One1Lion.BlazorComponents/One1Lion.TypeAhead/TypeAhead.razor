@typeparam TItem
@using One1Lion.Shared.Extensions

<div class="typeahead-container">
  <div class="input-group">
    <input type="text"
           class="form-control typeahead-input@(invalidSelection ? " is-invalid" : "") @(AddInputCss)"
           id="@Id"
           placeholder="Type a value..."
           @bind="typeAheadInput"
           @bind:event="oninput"
           disabled="@(Items is null)"
           @attributes="AdditionalAttributes"
           autocomplete="off"
           @onkeydown="HandleKeyPress"
           @onkeyup="HandleKeyPress"
           @onfocus="HandleFocus"
           @onblur="HandleBlur"
           @ref="TypeAheadInputBox" />
    @if (IsExpanded) {
      <div id="@Id-suggest" class="input-group-append show@(!string.IsNullOrWhiteSpace(AddSuggestListWrapperCss) ? $" {AddSuggestListWrapperCss}" : "")"
           @onkeypress="HandleKeyPress" 
           @onmousedown="HandleOverrideClose" 
           @onmouseup="HandleOverrideClose"
           @onmouseout="HandleOverrideClose">
        <div class="suggest-list">
          @if (Items is null) {
            <label class="dropdown-header">
              <span class="refreshing-list"></span> <span class="loading-msg">Loading...</span>
            </label>
          } else {
            totalVisSelectItems = 0;
            var totLikelyMatches = (startsWithItems?.Count() ?? 0) + (containsItems?.Count() ?? 0);

            <label class="dropdown-header">
              @if (loadingList) {
                <span class="refreshing-list"></span>
              } else {
                @totLikelyMatches
              }
              likely match@(loadingList || totLikelyMatches != 1 ? "es" : "")
            </label>

            <div class="suggest-list-body" @onclick:stopPropagation="true">
              @if (startsWithItems is { } && startsWithItems.Count() > 0) {

                @* foreach(var item in startsWithItems) {*@
                <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="startsWithItems" Context="item">
                  @{ var curItemIndex = totalVisSelectItems++; }
                  <a class="dropdown-item starts-with-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async _ => await HandleItemClicked(item, curItemIndex))">
                    <span class="oi oi-star"></span> @((MarkupString)item.MenuText.Boldify(_typeAheadInput, CaseSensitive))
                  </a>
                </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
                @*}*@
              }
              @if (containsItems is { } && containsItems.Count() > 0) {
                if (startsWithItems is { } && startsWithItems.Count() > 0) {<hr /> }
                @*foreach (var item in containsItems) {*@
                <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="containsItems" Context="item">
                  @{ var curItemIndex = totalVisSelectItems++; }
                  <a class="dropdown-item contains-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async _ => await HandleItemClicked(item, curItemIndex))">
                    @((MarkupString)item.MenuText.Boldify(_typeAheadInput, CaseSensitive))
                  </a>
                </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
                @*}*@
              }
              @if (allOtherItems is { } && allOtherItems.Count() > 0) {
                if ((startsWithItems is { } && startsWithItems.Count() > 0) || (containsItems is { } && containsItems.Count() > 0)) {<hr /> }
                @*foreach (var item in allOtherItems) {*@
                <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="allOtherItems" Context="item">
                  @{ var curItemIndex = totalVisSelectItems++; }
                  <a class="dropdown-item other-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async _ => await HandleItemClicked(item, curItemIndex))">
                    @((MarkupString)item.MenuText)
                  </a>
                </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
                @*}*@
              }
            </div>
          }
        </div>
      </div>
    }
  </div>
  <button type="button"
          class="btn btn-sm btn-outline-secondary dropdown-toggle d-inline-block"
          tabindex="-1"
          @onclick="@(async _ => { ToggleDropDown(); await SetFocus(); })"
          @onkeydown="HandleKeyPress"></button>
</div>

@code {

}
