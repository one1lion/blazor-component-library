@typeparam TItem

@implements IDnDContainer<TItem>

<CascadingValue Value=DnDState Name="State">
  <div class="draganddrop-container@(DnDState.Payload?.WrappingElement?.Id == Id ? " picked-up" : "")  @(DnDState.Target?.WrappingElement?.Id == Id ? " drag-hover" : "")"
       draggable="@((DnDState is { } && (!DnDState.EditItemAddresses?.Any(addr => addr.StartsWith(Address)) ?? true)).ToString())"
       @ondragstart="(() => { DnDState.SetPayload(Parent, IndexInParent, this); StateHasChanged(); })"
       @ondragstart:stopPropagation="true"
       @ondragend="((e) => { DnDState.ClearPayload(); StateHasChanged(); })"
       @ondragend:stopPropagation="true"
       @ondrop="(() => DnDState.HandleDropPayload())"
       @ondrop:stopPropagation="true"
       @ondragenter="((e) => { DnDState.SetTarget(Parent, IndexInParent, this); StateHasChanged(); })"
       @ondragenter:stopPropagation="true">

    @if (DnDState.BaseContainer.GroupTitleTemplate is { } || DnDState.BaseContainer.GroupControlBoxTemplate is { }) {
      <DragAndDropHeader Model="Item"
                         Parent="this"
                         IndexInParent="IndexInParent" />
    }
  <div class="draganddrop-body">
    @if (Children is null) {
      <p>Loading...</p>
    } else {
      if (Children.Count == 0) {
        if (DnDState.BaseContainer.AllowNewItem && DnDState.BaseContainer.EditTemplate is { }) {
          <DragAndDropTarget TItem="TItem"
                             IndexInParent="0"
                             Parent="this"
                             IsDropAfter="false" />
        } else {
          <DragAndDropTarget TItem="TItem"
                             IndexInParent="0"
                             Parent="this"
                             IsDropAfter="false" />
        }
      }
      ChildElements.Clear();
      for (var i = 0; i < Children.Count; i++) {
        if (Children[i] is { }) {
          if (new[] { SeparatorDisplay.BeforeOnly, SeparatorDisplay.BeforeAndAfter }.Contains(DnDState.BaseContainer.SeparatorDisplay) && DnDState.BaseContainer.SeparatorTemplate is { }) {
            <DragAndDropSeparator Item="Children[i]"
                                  Position="SeparatorPosition.Before"
                                  Parent="this"
                                  IndexInParent="i" />
          }
          if (DnDState.BaseContainer.AllowNewItem && DnDState.BaseContainer.EditTemplate is { }) {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="i"
                               Parent="this"
                               IsDropAfter="false" />
          } else {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="i"
                               Parent="this"
                               IsDropAfter="false" />
          }
          var childProp = string.IsNullOrWhiteSpace(DnDState.BaseContainer.ChildrenPropertyName) ? null : Children[i].GetType().GetProperty(DnDState.BaseContainer.ChildrenPropertyName);
          IDnDElement<TItem> newChild = null;
          if (childProp is { }) {
            <DragAndDropGroup Item="Children[i]"
                              Children="(List<TItem>)childProp.GetValue(Children[i])"
                              Parent="this"
                              IndexInParent="i" />
          } else {
            <DragAndDropItem Item="Children[i]"
                             Parent="this"
                             IndexInParent="i" />
          }
          if (newChild is { }) { ChildElements.Add(newChild); }
          if (DnDState.BaseContainer.AllowNewItem && DnDState.BaseContainer.EditTemplate is { }) {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="i + 1"
                               Parent="this"
                               IsDropAfter="true" />
          } else {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="i + 1"
                               Parent="this"
                               IsDropAfter="true" />
          }
          if (new[] { SeparatorDisplay.AfterOnly, SeparatorDisplay.Between, SeparatorDisplay.BeforeAndAfter }.Contains(DnDState.BaseContainer.SeparatorDisplay) && DnDState.BaseContainer.SeparatorTemplate is { } && (DnDState.BaseContainer.SeparatorDisplay != SeparatorDisplay.Between || i < Children.Count - 1)) {
            <DragAndDropSeparator Item="Children[i]"
                                  Position="SeparatorPosition.After"
                                  Parent="this"
                                  IndexInParent="i + 1" />
          }
        } else {
          // TODO: Handle null item
        }
      }
    }
  </div>
  </div>
</CascadingValue>

@code {
  [CascadingParameter(Name = "State")] public DnDState<TItem> DnDState { get; set; } = new DnDState<TItem>();
  [Parameter] public TItem Item { get; set; }
  [Parameter] public List<TItem> Children { get; set; }
  [Parameter] public IDnDContainer<TItem> Parent { get; set; }
  [Parameter] public int IndexInParent { get; set; }
  public TItem Model => Parent is { } && Parent.Children.Count > IndexInParent ? Parent.Children[IndexInParent] : default;
  public List<IDnDElement<TItem>> ChildElements { get; private set; } = new List<IDnDElement<TItem>>();

  public string Id { get; } = Guid.NewGuid().ToString();
  public string Address { get; private set; }

  protected override void OnParametersSet() {
    Address = $"{(Parent?.Address ?? Id)}.{IndexInParent}";
  }
}
